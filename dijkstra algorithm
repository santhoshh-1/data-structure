#include <stdio.h>
#include <limits.h>

#define V 6  
#define INF INT_MAX  
int minDistance(int dist[], int sptSet[]) {
    int min = INF, minIndex;
    for (int v = 0; v < V; v++) {
        if (sptSet[v] == 0 && dist[v] <= min) {
            min = dist[v];
            minIndex = v;
        }
    }
    return minIndex;
}

void dijkstra(int graph[V][V], int src) {
    int dist[V];  
    int sptSet[V]; 
    for (int i = 0; i < V; i++) {
        dist[i] = INF;
        sptSet[i] = 0;
    }


    dist[src] = 0;
  
    for (int count = 0; count < V - 1; count++) {
        int u = minDistance(dist, sptSet);
        sptSet[u] = 1;  

        for (int v = 0; v < V; v++) {
            // Update dist[v] if and only if the edge u-v exists, and the new distance is smaller
            if (!sptSet[v] && graph[u][v] && dist[u] != INF && dist[u] + graph[u][v] < dist[v]) {
                dist[v] = dist[u] + graph[u][v];
            }
        }
    }

    // Print the constructed distance array
    printf("Vertex \t Distance from Source\n");
    for (int i = 0; i < V; i++) {
        printf("%d \t %d\n", i, dist[i]);
    }
}
int main() {
    int graph[V][V] = {
        {0, 1, 0, 4, 0, 0},
        {1, 0, 2, 0, 3, 0},
        {0, 2, 0, 0, 0, 1},
        {4, 0, 0, 0, 2, 0},
        {0, 3, 0, 2, 0, 3},
        {0, 0, 1, 0, 3, 0}
    };
    int source = 0; 
    dijkstra(graph, source);

    return 0;
}
