#include<stdio.h>
#include<stdlib.h>

#define MAX_EDGES 100

struct Edge{int src,dest,weight;};

struct Graph{int V,E;struct Edge edges[MAX_EDGES];};

struct Subset{int parent,rank;};

int find(struct Subset subsets[],int i){
    if(subsets[i].parent!=i){
        subsets[i].parent=find(subsets,subsets[i].parent);
    }
    return subsets[i].parent;
}

void Union(struct Subset subsets[],int x,int y){
    int rootX=find(subsets,x);
    int rootY=find(subsets,y);

    if(subsets[rootX].rank<subsets[rootY].rank){
        subsets[rootX].parent=rootY;
    }else if(subsets[rootX].rank>subsets[rootY].rank){
        subsets[rootY].parent=rootX;
    }else{
        subsets[rootY].parent=rootX;
        subsets[rootX].rank++;
    }
}

int compareEdges(const void *a,const void *b){
    struct Edge *edgeA=(struct Edge*)a;
    struct Edge *edgeB=(struct Edge*)b;
    return edgeA->weight>edgeB->weight;
}

void Kruskal(struct Graph *graph){
    int V=graph->V;
    struct Edge result[V];
    int e=0,i=0;

    qsort(graph->edges,graph->E,sizeof(graph->edges[0]),compareEdges);

    struct Subset *subsets=(struct Subset*)malloc(V*sizeof(struct Subset));

    for(int v=0;v<V;++v){
        subsets[v].parent=v;
        subsets[v].rank=0;
    }

    while(e<V-1&&i<graph->E){
        struct Edge nextEdge=graph->edges[i++];

        int x=find(subsets,nextEdge.src);
        int y=find(subsets,nextEdge.dest);

        if(x!=y){
            result[e++]=nextEdge;
            Union(subsets,x,y);
        }
    }

    printf("Edges in the Minimum Spanning Tree:\n");
    for(i=0;i<e;++i){
        printf("%d--%d==%d\n",result[i].src,result[i].dest,result[i].weight);
    }

    free(subsets);
}

int main(){
    int V=4;
    int E=5;
    struct Graph graph={V,E,{{0,1,10},{0,2,6},{0,3,5},{1,3,15},{2,3,4}}};

    Kruskal(&graph);

    return 0;
}
